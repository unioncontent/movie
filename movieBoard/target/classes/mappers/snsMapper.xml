<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  
 <mapper namespace="org.union.mappers.SNSMapper">
 
 
 	<sql id="search">
 		<if test="keyword != null">
			<if test="searchType != null">
				<if test="searchType == 't'.toString()">
					and sns_title like concat('%', #{keyword}, '%')
				</if>
				<if test="searchType == 'c'.toString()">
					and sns_content like concat('%', #{keyword}, '%')
				</if>
			</if>
		</if>
		<if test="company != null">
			and
			   keyword in (select 
						keyword 
					from 
						keyword_data
					where
						user_idx = (select 
										user_idx 
									from 
										user_data 
									where 
										user_name = #{company} 
									and 
										keyword_property = '포함'
									)
					)
			
		</if>
		<if test="selectKey != null">
				and keyword in (select keyword from keyword_data where keyword_main = #{selectKey})
			</if>
		<if test="startDate != null">
			and createDate <![CDATA[>]]> #{startDate}
			<if test="endDate != null">
				and createDate <![CDATA[<]]> #{endDate}
			</if>
		</if>
		<if test="textType != null">
			and textType = #{textType}
		</if>
	</sql>
 
 
 	<insert id="create">
 		insert into
 			sns_data(sns_name, sns_title, sns_content, sns_writer, like_cnt, reply_cnt, share_cnt, writeDate, keyword, keyword_type, url, textType)
 		values
 			(#{sns_name}, #{sns_title}, #{sns_content}, #{sns_writer}, #{like_cnt}, #{reply_cnt}, #{share_cnt}, #{writeDate}, #{keyword}, #{keyword_type}, #{url}, #{textType})
 	</insert>
 
 	<select id="read" resultType="SNSVO">
 		select
 			*
 		from
 			sns_data
 		where
 			sns_idx = #{sns_idx}
 	
 	</select>
 	
 	<update id="update">
 		update
 			sns_data
 		set
 			sns_name = #{sns_name},
 			sns_title = #{sns_title},
 			sns_content = #{sns_content},
 			sns_writer = #{sns_writer},
 			like_cnt = #{like_cnt},
 			reply_cnt = #{reply_cnt},
 			share_cnt = #{share_cnt},
 			writeDate = #{writeDate},
 			keyword = #{keyword},
 			keyword_type = #{keyword_type},
 			url = #{url},
 			updateDate = now()
 		where
 			sns_idx = #{sns_idx}
 	
 	</update>
 	
 	<delete id="delete">
 		delete from
 			sns_data
 		where
 			sns_idx = #{sns_idx}
 			
 	</delete>
 	
 	<select id="allPageList" resultType="SNSVO">
		select
			*
		from
			sns_data
		where
			url is not null
		<include refid="search"></include>
		order 
			by updateDate desc
		limit  
			#{startPage}, #{perPageNum}
	</select>
	
	<select id="allPageCount" resultType="Integer">
		select
			count(*)
		from
			sns_data
		where
			url is not null
		<include refid="search"></include>
	</select>
 	
 	<select id="countAll" resultType="Integer">
		select count(*)
		from sns_data
		where createDate between date_add(#{date}, interval -1 hour) and #{date}
	
	</select>
	
 	
 	<select id="yesterdayCount" resultType="GraphVO">
 		select count(if(createDate <![CDATA[<]]> date_add(now(), interval -1 day), createDate, null)) type1,
	    count(if(createDate <![CDATA[>]]> date_add(now(), interval -1 day), createDate, null)) type2
		from sns_data 
		where createDate between date_add(now(), interval -2 day) and  date_add(now(), interval -0 day)
		and  sns_name = #{name}
 	</select>
 	
 	<select id="listExtract" resultType="SNSVO">
		select
			*
		from 
			sns_data
		where
			textType is null
		<if test="startDate != null">
		and
			writeDate <![CDATA[>]]> #{startDate}
		<if test="endDate != null">
  		and 
  			writeDate <![CDATA[<]]> #{endDate}
  		</if>
  		</if>
		<include refid="search"></include>
		order by
			createDate desc
		limit
			#{startPage}, #{perPageNum}
			
	
	</select>
	
	<select id="getExtractCount" resultType="Integer">
		select
			count(*)
		from 
			sns_data
		where
			textType is null
		<if test="startDate != null">
		and
			writeDate <![CDATA[>]]> #{startDate}
		<if test="endDate != null">
  		and 
  			writeDate <![CDATA[<]]> #{endDate}
  		</if>
  		</if>
		<include refid="search"></include>
	
	
	</select>
	
	<select id="listSearch" resultType="SNSVO">
		select 
			*
		from 
			sns_data
		where 
			textType is not null
		<include refid="search"></include>
		order 
			by updateDate desc
		limit  
			#{startPage}, #{perPageNum}
	
	</select>
	
	<select id = "getSearchCount" resultType="Integer">
		select
			count(*)
		from
			sns_data
		where
			textType is not null
		<include refid="search"></include>
			
	</select>
 	
 	<select id="listExcel" resultType="SNSVO">
 		select * from sns_data where sns_idx > 0
 		<include refid="search"></include>
 	</select>
 	
 	<select id="listExcelCount" resultType="Integer">
 		select count(*) from sns_data where sns_idx > 0
 		<include refid="search"></include>
 	</select>
 	
 	<select id="listAll" resultType="SNSVO">
		select 
			*
		from 
			sns_data
		where 
			textType is not null
		<include refid="search"></include>
		<if test="startDate != null">
			and createDate <![CDATA[>]]> #{startDate}
			<if test="endDate != null">
				and createDate <![CDATA[<]]> #{endDate}
			</if>
		</if>
	
	</select>
 	
 	<select id="facebookSum" resultType="GraphVO">
 		select count(*) type1, sum(like_cnt) likeCount, sum(share_cnt) shareCount, sum(reply_cnt) replyCount
		from union.sns_data
		where textType is not null
		and sns_name = 'facebook'
		<include refid="search"></include>
 	</select>
 	
 	<select id="twitterSum" resultType="GraphVO">
 		select count(*) type1, sum(like_cnt) likeCount, sum(share_cnt) shareCount, sum(reply_cnt) replyCount
		from union.sns_data
		where textType is not null
		and sns_name = 'twitter'
		<include refid="search"></include>
 	</select>
 	
 	<select id="instagramSum" resultType="GraphVO">
 		select count(*) type1, sum(like_cnt) likeCount, sum(share_cnt) shareCount, sum(reply_cnt) replyCount
		from union.sns_data
		where textType is not null
		and sns_name = 'instagram'
		<include refid="search"></include>
 	</select>
 	
 	<select id="facebookList" resultType="SNSVO">
 		select 
			*
		from 
			sns_data
		where 
			sns_name = 'facebook'
		<include refid="search"></include>
		order 
			by createdate desc
		limit  
			#{startPage}, #{perPageNum}
 	
 	</select>
 	
 	<select id="facebookTotalCount" resultType="Integer">
 		select 
 			count(*)
 		from	
 			sns_data
 		where
 			sns_name = 'facebook'
 		
 		<include refid="search"></include>
 		
 	</select>
 	
 	<select id="instaList" resultType="SNSVO">
 		select 
			*
		from 
			sns_data
		where 
			sns_name = 'instagram'
		<include refid="search"></include>
		order 
			by createdate desc
		limit  
			#{startPage}, #{perPageNum}
 	
 	</select>
 	
 	<select id="instaTotalCount" resultType="Integer">
 		select 
 			count(*)
 		from	
 			sns_data
 		where
 			sns_name = 'instagram'
 		
 		<include refid="search"></include>
 		
 	</select>
 	
 	<select id="twitterList" resultType="SNSVO">
 		select 
			*
		from 
			sns_data
		where 
			sns_name = 'twitter'
		<include refid="search"></include>
		order 
			by createdate desc
		limit  
			#{startPage}, #{perPageNum}
 	
 	</select>
 	
 	<select id="twitterTotalCount" resultType="Integer">
 		select 
 			count(*)
 		from	
 			sns_data
 		where
 			sns_name = 'twitter'
 		
 		<include refid="search"></include>
 		
 	</select>
 	
 	<select id="getDateCount" resultType="SNSVO">
 		select 
 			date_format(writeDate, '%x-%m-%d') writeDate, like_cnt, reply_cnt, share_cnt, sns_name
  		from 
  			sns_data
  		where 
  			writeDate <![CDATA[>]]> #{startDate}
  		and 
  			writeDate <![CDATA[<]]> #{endDate}
  		and 
  			sns_name = #{sns_name}
  		and writeDate is not null
  		<if test="company != null">
			and
			   keyword in (select 
						keyword 
					from 
						keyword_data
					where
						user_idx = (select 
										user_idx 
									from 
										user_data 
									where 
										user_name = #{company} 
									and 
										keyword_property = '포함'
									)
					)
			
		</if>
		<if test="selectKey != null">
				and keyword in (select keyword from keyword_data where keyword_main = #{selectKey})
		</if>
  		order by  date_format(writeDate, '%x-%m-%d') desc
 	
 	</select>
 	
 	<update id="updateTextType">
		update
			sns_data
		set
			textType = #{textType}, 
			updateDate = now()
		where
			sns_idx = #{sns_idx}
	
	</update>

	<update id="updateThumbnail">
		update
			sns_data
		set
			thumbnail = #{thumbnail}
		where
			sns_idx = #{sns_idx}
	
	</update>
	
	
 	
 </mapper>