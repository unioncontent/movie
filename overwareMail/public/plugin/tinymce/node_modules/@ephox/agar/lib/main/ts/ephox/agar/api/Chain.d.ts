declare const _default: {
    on: (f: any) => {
        runChain: (value: any, next: any, die: any) => void;
    };
    op: (fx: any) => {
        runChain: (value: any, next: any, die: any) => void;
    };
    control: (chain: any, guard: any) => {
        runChain: (value: any, next: any, die: any) => void;
    };
    mapper: (fx: any) => {
        runChain: (value: any, next: any, die: any) => void;
    };
    identity: {
        runChain: (value: any, next: any, die: any) => void;
    };
    binder: (fx: any) => {
        runChain: (value: any, next: any, die: any) => void;
    };
    inject: (value: any) => {
        runChain: (value: any, next: any, die: any) => void;
    };
    fromChains: (chains: any) => {
        runChain: (value: any, next: any, die: any) => void;
    };
    fromChainsWith: (initial: any, chains: any) => {
        runChain: (value: any, next: any, die: any) => void;
    };
    fromParent: (parent: any, chains: any) => {
        runChain: (value: any, next: any, die: any) => void;
    };
    asStep: (initial: any, chains: any) => (value: any, next: any, die: any) => void;
    wrap: (v: any) => {
        chain: any;
    };
    unwrap: (c: any) => any;
    wait: (amount: any) => {
        runChain: (value: any, next: any, die: any) => void;
    };
    debugging: {
        runChain: (value: any, next: any, die: any) => void;
    };
    log: (message: any) => {
        runChain: (value: any, next: any, die: any) => void;
    };
    pipeline: (chains: any, onSuccess: any, onFailure: any, delay?: any) => void;
};
export default _default;
