import { AdtInterface } from '../alien/AdtDefinition';
import { ValueValidator, Processor } from '../core/ValueProcessor';
import { FieldPresenceAdt } from '../api/FieldPresence';
export declare type SetOfTypeProcessor = (validator: ValueValidator, valueType: Processor) => any;
export declare type ArrOfTypeProcessor = (prop: Processor) => any;
export declare type ObjOfTypeProcessor = (fields: FieldProcessorAdt[]) => any;
export declare type ItemOfTypeProcessor = (validator: ValueValidator) => any;
export declare type ChoiceOfTypeProcessor = (key: string, branches: {
    [key: string]: FieldProcessorAdt[];
}) => any;
export declare type ThunkTypeProcessor = (description: string) => any;
export declare type FuncTypeProcessor = (args: string[], schema: Processor) => any;
export interface TypeProcessorAdt extends AdtInterface {
    fold<T>(SetOfTypeProcessor: any, ArrOfTypeProcessor: any, ObjOfTypeProcessor: any, ItemOfTypeProcessor: any, ChoiceOfTypeProcessor: any, ThunkTypeProcessor: any, FuncTypeProcessor: any): T;
}
export declare type OnFieldFieldProcessor = (name: string, presence: FieldPresenceAdt, type: Processor) => any;
export declare type StateFieldProcessor = (name: string) => any;
export interface FieldProcessorAdt extends AdtInterface {
    fold<T>(OnFieldFieldProcessor: any, StateFieldProcessor: any): T;
}
declare const typeAdt: any;
declare const fieldAdt: any;
export { typeAdt, fieldAdt };
