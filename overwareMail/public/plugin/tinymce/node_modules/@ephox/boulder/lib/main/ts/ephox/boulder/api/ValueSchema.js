import { Fun, Result, Type } from '@ephox/katamari';
import { arrOf, func, thunk, value, setOf, objOf, objOfOnly, arrOfObj as _arrOfObj } from '../core/ValueProcessor';
import { formatErrors, formatObj } from '../format/PrettyPrinter';
import { choose as _choose } from '../core/ChoiceProcessor';
var _anyValue = value(Result.value);
var arrOfObj = function (objFields) {
    return _arrOfObj(objFields);
};
var arrOfVal = function () {
    return arrOf(_anyValue);
};
var valueOf = function (validator) {
    return value(function (v) {
        // Intentionally not exposing "strength" at the API level
        return validator(v);
    });
};
var extract = function (label, prop, strength, obj) {
    return prop.extract([label], strength, obj).fold(function (errs) {
        return Result.error({
            input: obj,
            errors: errs
        });
    }, Result.value);
};
var asStruct = function (label, prop, obj) {
    return extract(label, prop, Fun.constant, obj);
};
var asRaw = function (label, prop, obj) {
    return extract(label, prop, Fun.identity, obj);
};
var getOrDie = function (extraction) {
    return extraction.fold(function (errInfo) {
        // A readable version of the error.
        throw new Error(formatError(errInfo));
    }, Fun.identity);
};
var asRawOrDie = function (label, prop, obj) {
    return getOrDie(asRaw(label, prop, obj));
};
var asStructOrDie = function (label, prop, obj) {
    return getOrDie(asStruct(label, prop, obj));
};
var formatError = function (errInfo) {
    return 'Errors: \n' + formatErrors(errInfo.errors) +
        '\n\nInput object: ' + formatObj(errInfo.input);
};
var choose = function (key, branches) {
    return _choose(key, branches);
};
var thunkOf = function (desc, schema) {
    return thunk(desc, schema);
};
var funcOrDie = function (args, prop) {
    var retriever = function (output, strength) {
        return getOrDie(extract('()', prop, strength, output));
    };
    return func(args, prop, retriever);
};
var anyValue = Fun.constant(_anyValue);
var typedValue = function (validator, expectedType) { return value(function (a) {
    var actualType = typeof a;
    return validator(a) ? Result.value(a) : Result.error("Expected type: " + expectedType + " but got: " + actualType);
}); };
var number = typedValue(Type.isNumber, 'number');
var string = typedValue(Type.isString, 'string');
var boolean = typedValue(Type.isBoolean, 'boolean');
var functionProcessor = typedValue(Type.isFunction, 'function');
export { anyValue, arrOfObj, arrOf, arrOfVal, valueOf, setOf, objOf, objOfOnly, asStruct, asRaw, asStructOrDie, asRawOrDie, getOrDie, formatError, choose, thunkOf, funcOrDie, number, string, boolean, functionProcessor as func };
//# sourceMappingURL=ValueSchema.js.map