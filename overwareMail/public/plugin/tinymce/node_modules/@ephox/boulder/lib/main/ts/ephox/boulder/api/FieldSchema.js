import { Result } from '@ephox/katamari';
import { value, objOf, arrOfObj, anyValue, objOfOnly, field, state as valueState } from '../core/ValueProcessor';
import * as FieldPresence from './FieldPresence';
import * as ValueSchema from './ValueSchema';
var strict = function (key) {
    return field(key, key, FieldPresence.strict(), anyValue());
};
var strictOf = function (key, schema) {
    return field(key, key, FieldPresence.strict(), schema);
};
var strictNumber = function (key) {
    return strictOf(key, ValueSchema.number);
};
var strictString = function (key) {
    return strictOf(key, ValueSchema.string);
};
var strictBoolean = function (key) {
    return strictOf(key, ValueSchema.boolean);
};
var strictFunction = function (key) {
    return strictOf(key, ValueSchema.func);
};
var forbid = function (key, message) {
    return field(key, key, FieldPresence.asOption(), value(function (v) {
        return Result.error('The field: ' + key + ' is forbidden. ' + message);
    }));
};
var strictObjOf = function (key, objSchema) {
    return field(key, key, FieldPresence.strict(), objOf(objSchema));
};
var strictArrayOfObj = function (key, objFields) {
    return field(key, key, FieldPresence.strict(), arrOfObj(objFields));
};
var option = function (key) {
    return field(key, key, FieldPresence.asOption(), anyValue());
};
var optionOf = function (key, schema) {
    return field(key, key, FieldPresence.asOption(), schema);
};
var optionNumber = function (key) {
    return optionOf(key, ValueSchema.number);
};
var optionString = function (key) {
    return optionOf(key, ValueSchema.string);
};
var optionBoolean = function (key) {
    return optionOf(key, ValueSchema.boolean);
};
var optionFunction = function (key) {
    return optionOf(key, ValueSchema.func);
};
var optionObjOf = function (key, objSchema) {
    return field(key, key, FieldPresence.asOption(), objOf(objSchema));
};
var optionObjOfOnly = function (key, objSchema) {
    return field(key, key, FieldPresence.asOption(), objOfOnly(objSchema));
};
var defaulted = function (key, fallback) {
    return field(key, key, FieldPresence.defaulted(fallback), anyValue());
};
var defaultedOf = function (key, fallback, schema) {
    return field(key, key, FieldPresence.defaulted(fallback), schema);
};
var defaultedNumber = function (key, fallback) {
    return defaultedOf(key, fallback, ValueSchema.number);
};
var defaultedString = function (key, fallback) {
    return defaultedOf(key, fallback, ValueSchema.string);
};
var defaultedBoolean = function (key, fallback) {
    return defaultedOf(key, fallback, ValueSchema.boolean);
};
var defaultedFunction = function (key, fallback) {
    return defaultedOf(key, fallback, ValueSchema.func);
};
var defaultedObjOf = function (key, fallback, objSchema) {
    return field(key, key, FieldPresence.defaulted(fallback), objOf(objSchema));
};
var state = function (okey, instantiator) {
    return valueState(okey, instantiator);
};
export { strict, strictOf, strictObjOf, strictArrayOfObj, strictNumber, strictString, strictBoolean, strictFunction, forbid, option, optionOf, optionNumber, optionString, optionBoolean, optionFunction, optionObjOf, optionObjOfOnly, defaulted, defaultedOf, defaultedNumber, defaultedString, defaultedBoolean, defaultedFunction, defaultedObjOf, field, state };
//# sourceMappingURL=FieldSchema.js.map