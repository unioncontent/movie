import { ResultCombine } from '../combine/ResultCombine';
import * as ObjChanger from '../core/ObjChanger';
import * as ObjReader from '../core/ObjReader';
import * as ObjWriter from '../core/ObjWriter';
// Perhaps this level of indirection is unnecessary.
var narrow = function (obj, fields) {
    return ObjChanger.narrow(obj, fields);
};
var exclude = function (obj, fields) {
    return ObjChanger.exclude(obj, fields);
};
var readOpt = function (key) {
    return ObjReader.readOpt(key);
};
var readOr = function (key, fallback) {
    return ObjReader.readOr(key, fallback);
};
var readOptFrom = function (obj, key) {
    return ObjReader.readOptFrom(obj, key);
};
var wrap = function (key, value) {
    return ObjWriter.wrap(key, value);
};
var wrapAll = function (keyvalues) {
    return ObjWriter.wrapAll(keyvalues);
};
var indexOnKey = function (array, key) {
    return ObjChanger.indexOnKey(array, key);
};
var consolidate = function (objs, base) {
    return ResultCombine.consolidateObj(objs, base);
};
var hasKey = function (obj, key) {
    return ObjReader.hasKey(obj, key);
};
export { narrow, exclude, readOpt, readOr, readOptFrom, wrap, wrapAll, indexOnKey, hasKey, consolidate };
//# sourceMappingURL=Objects.js.map