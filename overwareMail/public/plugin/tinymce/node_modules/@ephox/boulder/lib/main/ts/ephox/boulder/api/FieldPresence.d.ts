import { AdtInterface } from '../alien/AdtDefinition';
export declare type StrictField = () => any;
export declare type DefaultedThunkField = (fallbackThunk: (any) => any) => any;
export declare type AsOptionField = () => any;
export declare type AsDefaultedOptionThunkField = (fallbackThunk: (any) => any) => any;
export declare type MergeWithThunkField = (baseThunk: (any) => {
    any;
}) => any;
export interface FieldPresenceAdt extends AdtInterface {
    fold<T>(StrictField: any, DefaultedThunkField: any, AsOptionField: any, AsDefaultedOptionThunkField: any, MergeWithThunkField: any): T;
}
declare const defaulted: (fallback: any) => FieldPresenceAdt;
declare const asDefaultedOption: <T>(fallback: T) => FieldPresenceAdt;
declare const mergeWith: (base: {}) => FieldPresenceAdt;
declare const strict: any;
declare const asOption: any;
declare const defaultedThunk: any;
declare const asDefaultedOptionThunk: any;
declare const mergeWithThunk: any;
export { strict, asOption, defaulted, defaultedThunk, asDefaultedOption, asDefaultedOptionThunk, mergeWith, mergeWithThunk };
