import { Result } from '@ephox/katamari';
import * as FieldPresence from '../api/FieldPresence';
import { TypeProcessorAdt, FieldProcessorAdt } from '../format/TypeTokens';
import { AdtInterface } from '../alien/AdtDefinition';
export declare type ValueValidator = (a, strength?: () => any) => Result<any, string>;
export declare type PropExtractor = (path: string[], strength, val: any) => Result<any, any>;
export declare type ValueExtractor = (label: string, prop: Processor, strength: () => any, obj: any) => Result<any, string>;
export interface Processor {
    extract: PropExtractor;
    toString: () => string;
    toDsl: () => TypeProcessorAdt;
}
export declare type FieldValueProcessor = (key: string, okey: string, presence: FieldPresence.FieldPresenceAdt, prop: Processor) => FieldProcessorAdt;
export declare type StateValueProcessor = <T>(okey: string, instantiator) => T;
export interface ValueProcessorAdt extends AdtInterface {
    fold: (FieldValueProcessor, StateValueProcessor) => any;
}
export interface ValueProcessor {
    field: FieldValueProcessor;
    state: StateValueProcessor;
}
declare const output: (okey: any, value: any) => ValueProcessorAdt;
declare const snapshot: (okey: any) => ValueProcessorAdt;
declare const value: (validator: ValueValidator) => Processor;
declare const objOfOnly: (fields: ValueProcessorAdt[]) => Processor;
declare const objOf: (fields: FieldProcessorAdt[]) => Processor;
declare const arrOf: (prop: Processor) => Processor;
declare const setOf: (validator: ValueValidator, prop: Processor) => Processor;
declare const func: (args: string[], schema: Processor, retriever: any) => Processor;
declare const thunk: (desc: string, processor: () => Processor) => Processor;
declare const anyValue: (...x: any[]) => Processor;
declare const arrOfObj: (...x: any[]) => any;
declare const state: StateValueProcessor;
declare const field: FieldValueProcessor;
export { anyValue, value, objOf, objOfOnly, arrOf, setOf, arrOfObj, state, field, output, snapshot, thunk, func };
