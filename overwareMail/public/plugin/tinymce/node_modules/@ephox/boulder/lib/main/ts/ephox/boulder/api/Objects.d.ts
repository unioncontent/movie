import { Option, Result } from '@ephox/katamari';
declare const narrow: (obj: {}, fields: any[]) => {};
declare const exclude: (obj: {}, fields: any[]) => {};
declare const readOpt: <T>(key: string) => ({}: {}) => Option<T>;
declare const readOr: <T>(key: string, fallback: T) => ({}: {}) => T;
declare const readOptFrom: (obj: {}, key: string) => Option<any>;
declare const wrap: (key: string, value: {}) => {};
declare const wrapAll: (keyvalues: {
    key: string;
    value: any;
}[]) => {};
declare const indexOnKey: <T>(array: [{
        [T: string]: any;
    }], key: string) => {
    [T: string]: any;
};
declare const consolidate: (objs: [{}], base: {}) => Result<{}, string>;
declare const hasKey: (obj: {}, key: string) => boolean;
export { narrow, exclude, readOpt, readOr, readOptFrom, wrap, wrapAll, indexOnKey, hasKey, consolidate };
