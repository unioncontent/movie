"use strict";
exports.__esModule = true;
var Imports_1 = require("./Imports");
var Resolve_1 = require("../fs/Resolve");
var MainModule_1 = require("../ast/MainModule");
var Parser_1 = require("../ast/Parser");
var Fail_1 = require("../utils/Fail");
var isImport = function (node) { return node.type === 'ImportDeclaration'; };
var isMainModuleImport = function (modulePath) { return /^@ephox\/\w+$/.test(modulePath); };
var remapImport = function (fs, mainModuleCache, id, imp, forceFlat) {
    var mainModulePath = Resolve_1.resolveSync(fs, imp.modulePath, id, forceFlat);
    var mainModule = mainModuleCache.getOrThunk(mainModulePath, function () {
        var mainModuleProgram = Parser_1.parse(fs.readFileSync(mainModulePath).toString());
        return MainModule_1.readMainModule(mainModuleProgram);
    });
    var exportForImport = mainModule.exports.find(function (exp) { return exp.name === imp.fromName; });
    if (!exportForImport) {
        Fail_1.fail("Could not find export " + imp.fromName + " in main module " + mainModulePath);
    }
    var mainImportFromExport = mainModule.imports.find(function (imp) { return imp.name === exportForImport.fromName; });
    if (!exportForImport) {
        Fail_1.fail("Could not find import " + exportForImport.fromName + " in main module " + mainModulePath);
    }
    var resolvedModulePath = Resolve_1.resolveSync(fs, mainImportFromExport.modulePath, mainModulePath, forceFlat);
    return Imports_1.createImport(mainImportFromExport.kind, imp.name, mainImportFromExport.fromName, resolvedModulePath);
};
var remapImports = function (fs, mainModuleCache, id, imports, forceFlat) {
    return imports.map(function (imp) {
        return isMainModuleImport(imp.modulePath) ? remapImport(fs, mainModuleCache, id, imp, forceFlat) : imp;
    });
};
var remap = function (fs, mainModuleCache, id, node, forceFlat) {
    var imports = Imports_1.readImports(node);
    var body = node.body.filter(function (n) { return !isImport(n); });
    var remappedImports = remapImports(fs, mainModuleCache, id, imports, forceFlat);
    node.body = [].concat(Imports_1.toAst(remappedImports)).concat(body);
};
exports.remap = remap;
