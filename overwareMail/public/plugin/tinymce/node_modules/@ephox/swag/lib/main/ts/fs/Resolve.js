"use strict";
exports.__esModule = true;
var resolve = require("resolve");
var path = require("path");
var Fail_1 = require("../utils/Fail");
var resolveSync = function (fs, importee, importer, forceFlat) {
    var resolved = resolve.sync(importee, {
        basedir: path.dirname(importer),
        isFile: fs.isFileSync,
        readFileSync: fs.readFileSync,
        preserveSymlinks: false
    });
    if (resolved && fs.isFileSync(resolved)) {
        if (forceFlat && !isFlat(resolved)) {
            Fail_1.fail(forcedFlatMessage(importer, importee, resolved));
        }
        return fs.realpathSync(resolved);
    }
    else {
        return resolved;
    }
};
exports.resolveSync = resolveSync;
var forcedFlatMessage = function (importer, importee, resolved) { return [
    'Error non flat package structure detected:',
    ' importer: ' + importer,
    ' importee: ' + importee,
    ' resolved: ' + resolved
].join('\n'); };
var isFlat = function (id) { return id.split('/').filter(function (p) { return p === 'node_modules'; }).length < 2; };
var resolveUsingNode = function (fs, importee, importer, forceFlat) {
    return new Promise(function (fulfil, reject) {
        // console.log(importee, importer);
        resolve(importee, {
            basedir: path.dirname(importer),
            isFile: fs.isFile,
            readFile: fs.readFile,
            preserveSymlinks: false
        }, function (err, resolved) {
            if (err) {
                reject(err);
            }
            else {
                if (forceFlat && !isFlat(resolved)) {
                    reject(forcedFlatMessage(importer, importee, resolved));
                }
                else {
                    fulfil(fs.isFileSync(resolved) ? fs.realpathSync(resolved) : resolved);
                }
            }
        });
    });
};
var normalizePrefix = function (prefix) {
    return prefix.endsWith('/') ? prefix : prefix + '/';
};
var matchesPrefix = function (prefixes, importee) {
    return Object.keys(prefixes).find(function (p) { return importee.startsWith(normalizePrefix(p)); }) !== undefined;
};
var resolvePrefix = function (prefixes, importee, importer) {
    return new Promise(function (fulfil, reject) {
        var prefix = Object.keys(prefixes).find(function (p) { return importee.startsWith(normalizePrefix(p)); });
        var resolvedPrefix = prefixes[prefix];
        var resolvedPath = path.join(resolvedPrefix, importee.substring(normalizePrefix(prefix).length)) + '.js';
        fulfil(resolvedPath);
    });
};
var resolvePrefixPaths = function (baseDir, prefixes) {
    var outPrefixes = {};
    Object.keys(prefixes).forEach(function (prefix) {
        var resolveBaseDir = baseDir ? baseDir : '.';
        outPrefixes[prefix] = path.resolve(path.join(resolveBaseDir, prefixes[prefix]));
    });
    return outPrefixes;
};
exports.resolvePrefixPaths = resolvePrefixPaths;
var resolveId = function (fs, prefixes, forceFlat) { return function (importee, importer) {
    if (/\0/.test(importee) || !importer) {
        return null;
    }
    if (matchesPrefix(prefixes, importee)) {
        return resolvePrefix(prefixes, importee, importer);
    }
    else {
        return resolveUsingNode(fs, importee, importer, forceFlat);
    }
}; };
exports.resolveId = resolveId;
