"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
exports.__esModule = true;
var rollup = require("rollup");
var path = require("path");
var isFunction = function (val) { return typeof val === 'function'; };
var defaultInputOptions = {
    cache: null,
    external: [],
    preferConst: false,
    onwarn: null,
    plugins: null,
    pureExternalModules: false,
    treeshake: true
};
var defaultOutputOptions = {
    name: null,
    format: 'es',
    exports: 'auto',
    moduleId: null,
    globals: {},
    indent: true,
    strict: true,
    banner: null,
    footer: null,
    intro: null,
    outro: null,
    paths: null,
    sourcemap: false,
    sourcemapFile: null,
    interop: true
};
var defaultOptions = __assign({}, defaultInputOptions, defaultOutputOptions);
exports.task = function (grunt) {
    grunt.registerMultiTask('rollup', 'rollup your grunt!', function () {
        var done = this.async();
        var options = this.options(defaultOptions);
        var file = this.files[0];
        var input = file.src[0];
        var plugins = isFunction(options.plugins) ? options.plugins() : options.plugins;
        if (this.files.length > 1) {
            grunt.fail.warn('This task only accepts a single file input.');
        }
        else if (!file.src || file.src.length === 0) {
            grunt.fail.warn('No entry point specified.');
        }
        else if (!grunt.file.exists(input)) {
            grunt.fail.warn('Entry point "' + input + '" not found.');
        }
        rollup.rollup({
            cache: options.cache,
            input: input,
            external: options.external,
            plugins: plugins,
            context: options.context,
            onwarn: options.onwarn,
            preferConst: options.preferConst,
            pureExternalModules: options.pureExternalModules,
            treeshake: options.treeshake
        }).then(function (bundle) { return bundle.generate({
            format: options.format,
            exports: options.exports,
            paths: options.paths,
            name: options.name,
            globals: options.globals,
            indent: options.indent,
            strict: options.strict,
            banner: options.banner,
            footer: options.footer,
            intro: options.intro,
            outro: options.outro,
            sourcemap: options.sourcemap,
            sourcemapFile: options.sourcemapFile
        }); }).then(function (result) {
            if (options.sourcemap === true) {
                var sourceMapOutPath = file.dest + '.map';
                grunt.file.write(sourceMapOutPath, result.map.toString());
                grunt.file.write(file.dest, result.code + "\n//# sourceMappingURL=" + path.basename(sourceMapOutPath));
            }
            else if (options.sourcemap === 'inline') {
                grunt.file.write(file.dest, result.code + "\n//# sourceMappingURL=" + result.map.toUrl());
            }
            else {
                grunt.file.write(file.dest, result.code);
            }
            done();
        })["catch"](function (error) { return grunt.fail.warn(error); });
    });
};
