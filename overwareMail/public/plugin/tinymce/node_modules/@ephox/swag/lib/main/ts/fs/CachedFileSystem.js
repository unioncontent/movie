"use strict";
exports.__esModule = true;
var fs = require("fs");
var getFileSystem = function () {
    var statCache = {};
    var contentCache = {};
    var resolveCache = {};
    var isFile = function (file, cb) {
        var cacheItem = statCache[file];
        if (typeof cacheItem !== 'undefined') {
            return cb(null, cacheItem);
        }
        fs.stat(file, function (err, stat) {
            if (!err) {
                var exists = stat.isFile() || stat.isFIFO();
                statCache[file] = exists;
                return cb(null, exists);
            }
            if (err.code === 'ENOENT' || err.code === 'ENOTDIR') {
                statCache[file] = false;
                return cb(null, false);
            }
            return cb(err);
        });
    };
    var readFile = function (filePath, callback) {
        var cacheItem = contentCache[filePath];
        if (typeof cacheItem !== 'undefined') {
            return callback(null, cacheItem);
        }
        fs.readFile(filePath, function (err, data) {
            if (!err) {
                contentCache[filePath] = data;
            }
            callback(err, data);
        });
    };
    var isFileSync = function (filePath) {
        var cacheItem = statCache[filePath];
        if (typeof cacheItem !== 'undefined') {
            return cacheItem;
        }
        try {
            var stat = fs.statSync(filePath);
            var exists = stat.isFile() || stat.isFIFO();
            statCache[filePath] = exists;
            return exists;
        }
        catch (e) {
            if (e && (e.code === 'ENOENT' || e.code === 'ENOTDIR')) {
                return false;
            }
            throw e;
        }
    };
    var readFileSync = function (filePath) {
        var cacheItem = contentCache[filePath];
        if (typeof cacheItem !== 'undefined') {
            return cacheItem;
        }
        var data = fs.readFileSync(filePath);
        contentCache[filePath] = data;
        return data;
    };
    var realpathSync = function (filePath) {
        var cacheItem = resolveCache[filePath];
        if (typeof cacheItem !== 'undefined') {
            return cacheItem;
        }
        if (filePath && fs.existsSync(filePath)) {
            var resolved = fs.realpathSync(filePath);
            resolveCache[filePath] = resolved;
            return resolved;
        }
        return filePath;
    };
    return {
        isFile: isFile,
        readFile: readFile,
        isFileSync: isFileSync,
        readFileSync: readFileSync,
        realpathSync: realpathSync
    };
};
exports.getFileSystem = getFileSystem;
