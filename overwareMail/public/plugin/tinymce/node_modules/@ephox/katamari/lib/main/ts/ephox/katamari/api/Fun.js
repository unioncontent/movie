var noop = function () {
    var x = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        x[_i] = arguments[_i];
    }
};
var noarg = function (f) {
    return function () {
        var x = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            x[_i] = arguments[_i];
        }
        return f();
    };
};
var compose = function (fa, fb) {
    return function () {
        var x = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            x[_i] = arguments[_i];
        }
        return fa(fb.apply(null, arguments));
    };
};
var constant = function (value) {
    return function () {
        return value;
    };
};
var identity = function (x) {
    return x;
};
var tripleEquals = function (a, b) {
    return a === b;
};
// Don't use array slice(arguments), makes the whole function unoptimisable on Chrome
var curry = function (f) {
    var x = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        x[_i - 1] = arguments[_i];
    }
    // equivalent to arguments.slice(1)
    // starting at 1 because 0 is the f, makes things tricky.
    // Pay attention to what variable is where, and the -1 magic.
    // thankfully, we have tests for this.
    var args = new Array(arguments.length - 1);
    for (var i = 1; i < arguments.length; i++)
        args[i - 1] = arguments[i];
    return function () {
        var x = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            x[_i] = arguments[_i];
        }
        var newArgs = new Array(arguments.length);
        for (var j = 0; j < newArgs.length; j++)
            newArgs[j] = arguments[j];
        var all = args.concat(newArgs);
        return f.apply(null, all);
    };
};
var not = function (f) {
    return function () {
        var x = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            x[_i] = arguments[_i];
        }
        return !f.apply(null, arguments);
    };
};
var die = function (msg) {
    return function () {
        throw new Error(msg);
    };
};
var apply = function (f) {
    return f();
};
var call = function (f) {
    f();
};
var never = constant(false);
var always = constant(true);
export default {
    noop: noop,
    noarg: noarg,
    compose: compose,
    constant: constant,
    identity: identity,
    tripleEquals: tripleEquals,
    curry: curry,
    not: not,
    die: die,
    apply: apply,
    call: call,
    never: never,
    always: always
};
//# sourceMappingURL=Fun.js.map