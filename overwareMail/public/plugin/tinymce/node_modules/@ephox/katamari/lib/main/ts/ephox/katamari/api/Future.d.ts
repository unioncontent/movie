import { LazyValue } from './LazyValue';
export interface Future<T> {
    map: <U>(mapper: (v: T) => U) => Future<U>;
    bind: <U>(binder: (v: T) => Future<U>) => Future<U>;
    anonBind: <U>(thunk: Future<U>) => Future<U>;
    toLazy: () => LazyValue<T>;
    get: (callback: (v: T) => void) => void;
}
export declare const Future: {
    nu: <T = any>(baseFn: (completer: (value?: T) => void) => void) => Future<T>;
    pure: <T>(a: T) => Future<T>;
};
