import { Option } from './Option';
/** cat :: [Option a] -> [a] */
var cat = function (arr) {
    var r = [];
    var push = function (x) {
        r.push(x);
    };
    for (var i = 0; i < arr.length; i++) {
        arr[i].each(push);
    }
    return r;
};
/** findMap :: ([a], (a, Int -> Option b)) -> Option b */
var findMap = function (arr, f) {
    for (var i = 0; i < arr.length; i++) {
        var r = f(arr[i], i);
        if (r.isSome()) {
            return r;
        }
    }
    return Option.none();
};
/**
 * if all elements in arr are 'some', their inner values are passed as arguments to f
 * f must have arity arr.length
*/
var liftN = function (arr, f) {
    var r = [];
    for (var i = 0; i < arr.length; i++) {
        var x = arr[i];
        if (x.isSome()) {
            r.push(x.getOrDie());
        }
        else {
            return Option.none();
        }
    }
    return Option.some(f.apply(null, r));
};
export default {
    cat: cat,
    findMap: findMap,
    liftN: liftN
};
//# sourceMappingURL=Options.js.map