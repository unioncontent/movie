import Fun from './Fun';
;
var never = Fun.never;
var always = Fun.always;
/**
  Option objects support the following methods:

  fold :: this Option a -> ((() -> b, a -> b)) -> Option b

  is :: this Option a -> a -> Boolean

  isSome :: this Option a -> () -> Boolean

  isNone :: this Option a -> () -> Boolean

  getOr :: this Option a -> a -> a

  getOrThunk :: this Option a -> (() -> a) -> a

  getOrDie :: this Option a -> String -> a

  or :: this Option a -> Option a -> Option a
    - if some: return self
    - if none: return opt

  orThunk :: this Option a -> (() -> Option a) -> Option a
    - Same as "or", but uses a thunk instead of a value

  map :: this Option a -> (a -> b) -> Option b
    - "fmap" operation on the Option Functor.
    - same as 'each'

  ap :: this Option a -> Option (a -> b) -> Option b
    - "apply" operation on the Option Apply/Applicative.
    - Equivalent to <*> in Haskell/PureScript.

  each :: this Option a -> (a -> b) -> undefined
    - similar to 'map', but doesn't return a value.
    - intended for clarity when performing side effects.

  bind :: this Option a -> (a -> Option b) -> Option b
    - "bind"/"flatMap" operation on the Option Bind/Monad.
    - Equivalent to >>= in Haskell/PureScript; flatMap in Scala.

  flatten :: {this Option (Option a))} -> () -> Option a
    - "flatten"/"join" operation on the Option Monad.

  exists :: this Option a -> (a -> Boolean) -> Boolean

  forall :: this Option a -> (a -> Boolean) -> Boolean

  filter :: this Option a -> (a -> Boolean) -> Option a

  equals :: this Option a -> Option a -> Boolean

  equals_ :: this Option a -> (Option a, a -> Boolean) -> Boolean

  toArray :: this Option a -> () -> [a]

*/
var none = function () { return NONE; };
var NONE = (function () {
    var eq = function (o) {
        return o.isNone();
    };
    // inlined from peanut, maybe a micro-optimisation?
    var call = function (thunk) { return thunk(); };
    var id = function (n) { return n; };
    var noop = function () { };
    var me = {
        fold: function (n, s) { return n(); },
        is: never,
        isSome: never,
        isNone: always,
        getOr: id,
        getOrThunk: call,
        getOrDie: function (msg) {
            throw new Error(msg || 'error: getOrDie called on none.');
        },
        or: id,
        orThunk: call,
        map: none,
        ap: none,
        each: noop,
        bind: none,
        flatten: none,
        exists: never,
        forall: always,
        filter: none,
        equals: eq,
        equals_: eq,
        toArray: function () { return []; },
        toString: Fun.constant('none()')
    };
    if (Object.freeze)
        Object.freeze(me);
    return me;
})();
/** some :: a -> Option a */
var some = function (a) {
    // inlined from peanut, maybe a micro-optimisation?
    var constant_a = function () { return a; };
    var self = function () {
        // can't Fun.constant this one
        return me;
    };
    var map = function (f) {
        return some(f(a));
    };
    var bind = function (f) {
        return f(a);
    };
    var me = {
        fold: function (n, s) { return s(a); },
        is: function (v) { return a === v; },
        isSome: always,
        isNone: never,
        getOr: constant_a,
        getOrThunk: constant_a,
        getOrDie: constant_a,
        or: self,
        orThunk: self,
        map: map,
        ap: function (optfab) {
            return optfab.fold(none, function (fab) {
                return some(fab(a));
            });
        },
        each: function (f) {
            f(a);
        },
        bind: bind,
        flatten: constant_a,
        exists: bind,
        forall: bind,
        filter: function (f) {
            return f(a) ? me : NONE;
        },
        equals: function (o) {
            return o.is(a);
        },
        equals_: function (o, elementEq) {
            return o.fold(never, function (b) { return elementEq(a, b); });
        },
        toArray: function () {
            return [a];
        },
        toString: function () {
            return 'some(' + a + ')';
        }
    };
    return me;
};
/** from :: undefined|null|a -> Option a */
var from = function (value) {
    return value === null || value === undefined ? NONE : some(value);
};
export var Option = {
    some: some,
    none: none,
    from: from
};
//# sourceMappingURL=Option.js.map