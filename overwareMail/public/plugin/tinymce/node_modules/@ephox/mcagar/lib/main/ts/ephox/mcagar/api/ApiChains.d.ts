import { Presence } from './TinyApis';
declare const _default: {
    cSetContent: (html: string) => {
        runChain: (value: any, next: any, die: any) => void;
    };
    cGetContent: {
        runChain: (value: any, next: any, die: any) => void;
    };
    cSetSelectionFrom: (spec: any) => {
        runChain: (value: any, next: any, die: any) => void;
    };
    cSetSelection: (startPath: any, soffset: any, finishPath: any, foffset: any) => {
        runChain: (value: any, next: any, die: any) => void;
    };
    cSetSetting: (key: string, value: any) => {
        runChain: (value: any, next: any, die: any) => void;
    };
    cDeleteSetting: (key: string) => {
        runChain: (value: any, next: any, die: any) => void;
    };
    cSetCursor: (elementPath: number[], offset: number) => {
        runChain: (value: any, next: any, die: any) => void;
    };
    cSelect: (selector: string, path: number[]) => {
        runChain: (value: any, next: any, die: any) => void;
    };
    cExecCommand: (command: string, value?: any) => {
        runChain: (value: any, next: any, die: any) => void;
    };
    cNodeChanged: {
        runChain: (value: any, next: any, die: any) => void;
    };
    cFocus: {
        runChain: (value: any, next: any, die: any) => void;
    };
    cAssertContent: (expected: string) => {
        runChain: (value: any, next: any, die: any) => void;
    };
    cAssertContentPresence: (expected: Presence) => {
        runChain: (value: any, next: any, die: any) => void;
    };
    cAssertContentStructure: (expected: any) => {
        runChain: (value: any, next: any, die: any) => void;
    };
    cAssertSelection: (startPath: number[], soffset: number, finishPath: number[], foffset: number) => {
        runChain: (value: any, next: any, die: any) => void;
    };
};
export default _default;
