export interface Presence {
    [selector: string]: number;
}
export default function (editor: any): {
    sSetContent: (html: string) => (value: any, next: any, die: any) => void;
    cGetContent: {
        runChain: (value: any, next: any, die: any) => void;
    };
    sSetRawContent: (html: string) => (value: any, next: any, die: any) => void;
    cNodeChanged: {
        runChain: (value: any, next: any, die: any) => void;
    };
    sAssertContent: (expected: string) => (value: any, next: any, die: any) => void;
    sAssertContentPresence: (expected: Presence) => (value: any, next: any, die: any) => void;
    sAssertContentStructure: (expected: any) => (value: any, next: any, die: any) => void;
    sSetSelectionFrom: (spec: any) => (value: any, next: any, die: any) => void;
    sSetSelection: (startPath: number[], soffset: number, finishPath: number[], foffset: number) => (value: any, next: any, die: any) => void;
    sSetSetting: (key: string, value: any) => (value: any, next: any, die: any) => void;
    sDeleteSetting: (key: string) => (value: any, next: any, die: any) => void;
    sSetCursor: (elementPath: number[], offset: number) => (value: any, next: any, die: any) => void;
    sSelect: (selector: string, path: number[]) => (value: any, next: any, die: any) => void;
    sExecCommand: (command: string, value?: any) => (value: any, next: any, die: any) => void;
    sAssertSelection: (startPath: number[], soffset: number, finishPath: number[], foffset: number) => (value: any, next: any, die: any) => void;
    sTryAssertFocus: (value: any, next: any, die: any) => void;
    sFocus: (value: any, next: any, die: any) => void;
    sNodeChanged: (value: any, next: any, die: any) => void;
};
