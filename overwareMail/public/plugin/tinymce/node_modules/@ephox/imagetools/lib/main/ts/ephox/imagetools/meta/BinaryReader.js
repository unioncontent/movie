var BinaryReader = /** @class */ (function () {
    function BinaryReader(ar) {
        this.littleEndian = false;
        this._dv = new DataView(ar);
    }
    BinaryReader.prototype.readByteAt = function (idx) {
        return this._dv.getUint8(idx);
    };
    BinaryReader.prototype.read = function (idx, size) {
        if (idx + size > this.length()) {
            return null;
        }
        var mv = this.littleEndian ? 0 : -8 * (size - 1);
        for (var i = 0, sum = 0; i < size; i++) {
            sum |= (this.readByteAt(idx + i) << Math.abs(mv + i * 8));
        }
        return sum;
    };
    BinaryReader.prototype.BYTE = function (idx) {
        return this.read(idx, 1);
    };
    BinaryReader.prototype.SHORT = function (idx) {
        return this.read(idx, 2);
    };
    BinaryReader.prototype.LONG = function (idx) {
        return this.read(idx, 4);
    };
    BinaryReader.prototype.SLONG = function (idx) {
        var num = this.read(idx, 4);
        return (num > 2147483647 ? num - 4294967296 : num);
    };
    BinaryReader.prototype.CHAR = function (idx) {
        return String.fromCharCode(this.read(idx, 1));
    };
    BinaryReader.prototype.STRING = function (idx, count) {
        return this.asArray('CHAR', idx, count).join('');
    };
    BinaryReader.prototype.SEGMENT = function (idx, size) {
        var ar = this._dv.buffer;
        switch (arguments.length) {
            case 2:
                return ar.slice(idx, idx + size);
            case 1:
                return ar.slice(idx);
            default: return ar;
        }
    };
    BinaryReader.prototype.asArray = function (type, idx, count) {
        var values = [];
        for (var i = 0; i < count; i++) {
            values[i] = this[type](idx + i);
        }
        return values;
    };
    BinaryReader.prototype.length = function () {
        return this._dv ? this._dv.byteLength : 0;
    };
    return BinaryReader;
}());
export default BinaryReader;
//# sourceMappingURL=BinaryReader.js.map