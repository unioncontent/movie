import { DslType } from '@ephox/boulder';
import { EventHandlerConfig } from '../../api/events/AlloyEvents';
import * as UiSketcher from './UiSketcher';
import { AlloyBehaviourSchema } from '../../api/behaviour/Behaviour';
export interface RawElementSchema {
    tag: string;
    attributes?: Record<string, any>;
    styles?: Record<string, string>;
    innerHtml?: string;
    classes?: string[];
}
export declare type AlloyComponentsSpec = RawDomSchema[] | SketchSpec[];
export declare type AlloyMixedSpec = RawDomSchema | SketchSpec;
export interface SingleSketch {
    name: () => string;
    configFields: () => DslType.FieldProcessorAdt[];
    partFields: () => DslType.FieldProcessorAdt[];
    sketch: (spec: Record<string, any>) => SketchSpec;
    factory: UiSketcher.SingleFactory;
    [key: string]: Function;
}
export interface CompositeSketch {
    name: () => string;
    configFields: () => DslType.FieldProcessorAdt[];
    partFields: () => DslType.FieldProcessorAdt[];
    sketch: (spec: Record<string, any>) => SketchSpec;
    parts: () => any;
    factory: UiSketcher.CompositeFactory;
    [key: string]: Function;
}
export interface RawDomSchema {
    dom: RawElementSchema;
    components?: AlloyComponentsSpec;
    items?: RawDomSchema[];
    value?: string;
    autofocus?: boolean;
    type?: string;
    data?: {};
    markers?: {};
    behaviours?: Record<string, AlloyBehaviourSchema>;
    events?: EventHandlerConfig | {};
    domModification?: {};
}
export interface RawDomSchemaUid extends RawDomSchema {
    uid: string;
}
export interface SketchSpec extends RawDomSchema {
    domModification: {};
    eventOrder: {};
    uid: string;
    'debug.sketcher': {};
}
export declare function isSketchSpec(spec: RawDomSchema | SketchSpec): spec is SketchSpec;
declare const single: (rawConfig: any) => SingleSketch;
declare const composite: (rawConfig: any) => CompositeSketch;
export { single, composite };
