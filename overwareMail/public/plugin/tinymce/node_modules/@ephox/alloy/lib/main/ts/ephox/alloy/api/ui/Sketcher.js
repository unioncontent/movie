import { FieldSchema, ValueSchema } from '@ephox/boulder';
import { Fun, Merger, Obj } from '@ephox/katamari';
import * as FunctionAnnotator from '../../debugging/FunctionAnnotator';
import * as AlloyParts from '../../parts/AlloyParts';
import * as GuiTypes from './GuiTypes';
import * as UiSketcher from './UiSketcher';
export function isSketchSpec(spec) {
    return spec.uid !== undefined;
}
var singleSchema = ValueSchema.objOfOnly([
    FieldSchema.strict('name'),
    FieldSchema.strict('factory'),
    FieldSchema.strict('configFields'),
    FieldSchema.defaulted('apis', {}),
    FieldSchema.defaulted('extraApis', {})
]);
var compositeSchema = ValueSchema.objOfOnly([
    FieldSchema.strict('name'),
    FieldSchema.strict('factory'),
    FieldSchema.strict('configFields'),
    FieldSchema.strict('partFields'),
    FieldSchema.defaulted('apis', {}),
    FieldSchema.defaulted('extraApis', {})
]);
var single = function (rawConfig) {
    var config = ValueSchema.asRawOrDie('Sketcher for ' + rawConfig.name, singleSchema, rawConfig);
    var sketch = function (spec) {
        return UiSketcher.single(config.name, config.configFields, config.factory, spec);
    };
    var apis = Obj.map(config.apis, GuiTypes.makeApi);
    var extraApis = Obj.map(config.extraApis, function (f, k) {
        return FunctionAnnotator.markAsExtraApi(f, k);
    });
    return Merger.deepMerge({
        name: Fun.constant(config.name),
        partFields: Fun.constant([]),
        configFields: Fun.constant(config.configFields),
        sketch: sketch
    }, apis, extraApis);
};
var composite = function (rawConfig) {
    var config = ValueSchema.asRawOrDie('Sketcher for ' + rawConfig.name, compositeSchema, rawConfig);
    var sketch = function (spec) {
        return UiSketcher.composite(config.name, config.configFields, config.partFields, config.factory, spec);
    };
    // These are constructors that will store their configuration.
    var parts = AlloyParts.generate(config.name, config.partFields);
    var apis = Obj.map(config.apis, GuiTypes.makeApi);
    var extraApis = Obj.map(config.extraApis, function (f, k) {
        return FunctionAnnotator.markAsExtraApi(f, k);
    });
    return Merger.deepMerge({
        name: Fun.constant(config.name),
        partFields: Fun.constant(config.partFields),
        configFields: Fun.constant(config.configFields),
        sketch: sketch,
        parts: Fun.constant(parts)
    }, apis, extraApis);
};
export { single, composite };
//# sourceMappingURL=Sketcher.js.map