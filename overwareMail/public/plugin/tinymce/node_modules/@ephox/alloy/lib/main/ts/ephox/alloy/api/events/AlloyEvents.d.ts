import { AlloyComponent } from '../../api/component/ComponentApi';
import { SpecSchemaStruct } from '../../spec/SpecSchema';
export interface EventHandlerConfig {
    key: string;
    value: {
        can: () => boolean;
        abort: () => boolean;
        run: EventRunHandler;
    };
}
export declare type EventRunHandler = (component: AlloyComponent, action: {
    [eventName: string]: any;
}) => any;
export declare type RunOnSourceName = (handler: EventRunHandler) => EventHandlerConfig;
declare const derive: (keyvalues: {
    key: string;
    value: any;
}[]) => {};
declare const abort: (name: any, predicate: any) => {
    key: any;
    value: any;
};
declare const can: (name: any, predicate: any) => {
    key: any;
    value: any;
};
declare const preventDefault: (name: string) => EventHandlerConfig;
declare const run: (name: string, handler: EventRunHandler) => EventHandlerConfig;
declare const runActionExtra: (name: string, action: (t: any, u: any) => void, extra: SpecSchemaStruct[]) => EventHandlerConfig;
declare const redirectToUid: (name: any, uid: any) => EventHandlerConfig;
declare const redirectToPart: (name: any, detail: any, partName: any) => EventHandlerConfig;
declare const runWithTarget: (name: any, f: any) => EventHandlerConfig;
declare const cutter: (name: any) => EventHandlerConfig;
declare const stopper: (name: any) => EventHandlerConfig;
declare const runOnAttached: RunOnSourceName;
declare const runOnDetached: RunOnSourceName;
declare const runOnInit: RunOnSourceName;
declare const runOnExecute: RunOnSourceName;
export { derive, run, preventDefault, runActionExtra, runOnAttached, runOnDetached, runOnInit, runOnExecute, redirectToUid, redirectToPart, runWithTarget, abort, can, cutter, stopper };
