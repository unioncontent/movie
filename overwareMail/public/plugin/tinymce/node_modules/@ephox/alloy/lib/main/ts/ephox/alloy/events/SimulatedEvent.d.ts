import { SugarElement, SugarEvent } from '../alien/TypeDefinitions';
import { AlloyComponent } from '../api/component/ComponentApi';
export interface SimulatedEvent {
    stop: () => void;
    cut: () => void;
    isStopped: () => boolean;
    isCut: () => boolean;
    event: () => AnyEvent;
    getSource: (element: SugarElement) => AlloyComponent;
    setSource: (element: SugarElement) => void;
}
export declare type AnyEvent = SimulatedEventTargets | SugarEvent;
export interface SimulatedEventTargets {
    target: () => SugarElement;
    [key: string]: () => any;
}
declare const fromSource: (event: any, source: any) => {
    stop: () => void;
    cut: () => void;
    isStopped: () => boolean;
    isCut: () => boolean;
    event: (...x: any[]) => any;
    setSource: any;
    getSource: any;
};
declare const fromExternal: (event: any) => {
    stop: () => void;
    cut: (...x: any[]) => void;
    isStopped: () => boolean;
    isCut: (...x: any[]) => boolean;
    event: (...x: any[]) => any;
    setTarget: () => never;
    getTarget: () => never;
};
declare const fromTarget: (event: any, target: any) => {
    stop: () => void;
    cut: () => void;
    isStopped: () => boolean;
    isCut: () => boolean;
    event: (...x: any[]) => any;
    setSource: any;
    getSource: any;
};
export { fromSource, fromExternal, fromTarget };
