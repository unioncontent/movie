import { Option } from '@ephox/katamari';
import { AlloyComponent } from '../../api/component/ComponentApi';
import * as TransitionApis from '../../behaviour/transitioning/TransitionApis';
import * as Behaviour from './Behaviour';
export interface TransitioningBehaviour extends Behaviour.AlloyBehaviour {
    config: (config: TransitioningConfig) => {
        [key: string]: (any) => any;
    };
    findRoute?: <T>(comp: AlloyComponent, route: TransitionApis.TransitionRoute) => Option<T>;
    disableTransition?: (comp: AlloyComponent) => void;
    getCurrentRoute?: any;
    jumpTo?: (comp: AlloyComponent, destination: string) => void;
    progressTo?: (comp: AlloyComponent, destination: string) => void;
    getState?: any;
    createRoutes?: (route: TransitionApis.TransitionRoute) => {};
    createBistate?: (first: string, second: string, transitions: TransitionProperties) => {
        key: string;
        value: any;
    };
    createTristate?: (first: string, second: string, third: string, transitions: TransitionProperties) => {
        key: string;
        value: any;
    };
}
export interface TransitioningConfig {
    destinationAttr?: string;
    stateAttr?: string;
    initialState: string;
    routes: Record<string, any>;
    onTransition?: (comp: AlloyComponent, route: TransitionApis.TransitionRoute) => void;
    onFinish?: (comp: AlloyComponent, destination: string) => void;
}
export interface TransitionProperties {
    transition: {
        property: string;
        transitionClass: string;
    };
}
export declare type TransitioningInitialState = 'before' | 'current' | 'after';
declare const Transitioning: TransitioningBehaviour;
export { Transitioning };
