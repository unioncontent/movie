import { Option } from '@ephox/katamari';
import { AlloyComponent } from '../../api/component/ComponentApi';
import { CoordAdt } from '../../api/data/DragCoord';
import { EventHandlerConfig } from '../../api/events/AlloyEvents';
import * as Behaviour from './Behaviour';
export interface DraggingBehaviour extends Behaviour.AlloyBehaviour {
    config: <T>(config: DraggingConfig<T>) => {
        [key: string]: (any) => any;
    };
    snap: (SnapConfig) => any;
}
export declare type DraggingMode = 'touch' | 'mouse';
export declare type SensorCoords = (x: number, y: number) => CoordAdt;
export declare type OutputCoords = (x: Option<number>, y: Option<number>) => CoordAdt;
export interface SnapConfig {
    sensor: SensorCoords;
    range: (x, y) => Coordinates;
    output: OutputCoords;
}
export interface SnapBehaviour {
    getSnapPoints: () => any[];
    leftAttr: string;
    topAttr: string;
    onSensor?: () => (component: AlloyComponent, extra: {}) => void;
    lazyViewport?: (component: AlloyComponent) => any;
}
export interface DraggingConfig<T> {
    mode: DraggingMode;
    blockerClass?: string;
    snaps?: SnapBehaviour;
    getTarget?: (handle: EventHandlerConfig) => any;
    useFixed?: boolean;
    onDrop?: () => any;
    dragger?: () => any;
}
declare const Dragging: DraggingBehaviour;
export { Dragging };
