import { FieldSchema, Objects, ValueSchema } from '@ephox/boulder';
import { Fun } from '@ephox/katamari';
import * as Behaviour from '../../behaviour/common/Behaviour';
import * as NoState from '../../behaviour/common/NoState';
var derive = function (capabilities) {
    return Objects.wrapAll(capabilities);
};
var simpleSchema = ValueSchema.objOfOnly([
    FieldSchema.strict('fields'),
    FieldSchema.strict('name'),
    FieldSchema.defaulted('active', {}),
    FieldSchema.defaulted('apis', {}),
    FieldSchema.defaulted('extra', {}),
    FieldSchema.defaulted('state', NoState)
]);
var create = function (data) {
    var value = ValueSchema.asRawOrDie('Creating behaviour: ' + data.name, simpleSchema, data);
    return Behaviour.create(value.fields, value.name, value.active, value.apis, value.extra, value.state);
};
var modeSchema = ValueSchema.objOfOnly([
    FieldSchema.strict('branchKey'),
    FieldSchema.strict('branches'),
    FieldSchema.strict('name'),
    FieldSchema.defaulted('active', {}),
    FieldSchema.defaulted('apis', {}),
    FieldSchema.defaulted('extra', {}),
    FieldSchema.defaulted('state', NoState)
]);
var createModes = function (data) {
    var value = ValueSchema.asRawOrDie('Creating behaviour: ' + data.name, modeSchema, data);
    return Behaviour.createModes(ValueSchema.choose(value.branchKey, value.branches), value.name, value.active, value.apis, value.extra, value.state);
};
var revoke = Fun.constant(undefined);
var noActive = Fun.constant({});
var noApis = Fun.constant({});
var noExtra = Fun.constant({});
var noState = Fun.constant(NoState);
export { derive, revoke, noActive, noApis, noExtra, noState, create, createModes };
//# sourceMappingURL=Behaviour.js.map