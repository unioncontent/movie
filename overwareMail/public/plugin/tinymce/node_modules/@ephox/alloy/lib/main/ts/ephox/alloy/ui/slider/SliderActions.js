import { Fun, Option } from '@ephox/katamari';
import { PlatformDetection } from '@ephox/sand';
import * as AlloyTriggers from '../../api/events/AlloyTriggers';
import * as SliderModel from './SliderModel';
var _changeEvent = 'slider.change.value';
var isTouch = PlatformDetection.detect().deviceType.isTouch();
var getEventSource = function (simulatedEvent) {
    var evt = simulatedEvent.event().raw();
    if (isTouch && evt.touches !== undefined && evt.touches.length === 1) {
        return Option.some(evt.touches[0]);
    }
    else if (isTouch && evt.touches !== undefined) {
        return Option.none();
    }
    else if (!isTouch && evt.clientX !== undefined) {
        return Option.some(evt);
    }
    else {
        return Option.none();
    }
};
var getEventX = function (simulatedEvent) {
    var spot = getEventSource(simulatedEvent);
    return spot.map(function (s) {
        return s.clientX;
    });
};
var fireChange = function (component, value) {
    AlloyTriggers.emitWith(component, _changeEvent, { value: value });
};
var moveRightFromLedge = function (ledge, detail) {
    fireChange(ledge, detail.min());
};
var moveLeftFromRedge = function (redge, detail) {
    fireChange(redge, detail.max());
};
var setToRedge = function (redge, detail) {
    fireChange(redge, detail.max() + 1);
};
var setToLedge = function (ledge, detail) {
    fireChange(ledge, detail.min() - 1);
};
var setToX = function (spectrum, spectrumBounds, detail, xValue) {
    var value = SliderModel.findValueOfX(spectrumBounds, detail.min(), detail.max(), xValue, detail.stepSize(), detail.snapToGrid(), detail.snapStart());
    fireChange(spectrum, value);
};
var setXFromEvent = function (spectrum, detail, spectrumBounds, simulatedEvent) {
    return getEventX(simulatedEvent).map(function (xValue) {
        setToX(spectrum, spectrumBounds, detail, xValue);
        return xValue;
    });
};
var moveLeft = function (spectrum, detail) {
    var newValue = SliderModel.reduceBy(detail.value().get(), detail.min(), detail.max(), detail.stepSize());
    fireChange(spectrum, newValue);
};
var moveRight = function (spectrum, detail) {
    var newValue = SliderModel.increaseBy(detail.value().get(), detail.min(), detail.max(), detail.stepSize());
    fireChange(spectrum, newValue);
};
var changeEvent = Fun.constant(_changeEvent);
export { setXFromEvent, setToLedge, setToRedge, moveLeftFromRedge, moveRightFromLedge, moveLeft, moveRight, changeEvent };
//# sourceMappingURL=SliderActions.js.map