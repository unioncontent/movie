import { FieldSchema } from '@ephox/boulder';
import { Fun } from '@ephox/katamari';
import { JSON as Json } from '@ephox/sand';
import { SelectorFind } from '@ephox/sugar';
import * as Behaviour from '../../api/behaviour/Behaviour';
import { Dragging } from '../../api/behaviour/Dragging';
import { Keying } from '../../api/behaviour/Keying';
import * as SketchBehaviours from '../../api/component/SketchBehaviours';
import * as Fields from '../../data/Fields';
import * as PartType from '../../parts/PartType';
var schema = Fun.constant([
    FieldSchema.strict('lazySink'),
    FieldSchema.option('dragBlockClass'),
    FieldSchema.defaulted('useTabstopAt', Fun.constant(true)),
    SketchBehaviours.field('modalBehaviours', [Keying]),
    Fields.onKeyboardHandler('onExecute'),
    Fields.onStrictKeyboardHandler('onEscape')
]);
var basic = { sketch: Fun.identity };
var parts = Fun.constant([
    PartType.optional({
        name: 'draghandle',
        overrides: function (detail, spec) {
            return {
                behaviours: Behaviour.derive([
                    Dragging.config({
                        mode: 'mouse',
                        getTarget: function (handle) {
                            return SelectorFind.ancestor(handle, '[role="dialog"]').getOr(handle);
                        },
                        blockerClass: detail.dragBlockClass().getOrDie(new Error('The drag blocker class was not specified for a dialog with a drag handle: \n' +
                            Json.stringify(spec, null, 2)))
                    })
                ])
            };
        }
    }),
    PartType.required({
        schema: [FieldSchema.strict('dom')],
        name: 'title'
    }),
    PartType.required({
        factory: basic,
        schema: [FieldSchema.strict('dom')],
        name: 'close'
    }),
    PartType.required({
        factory: basic,
        schema: [FieldSchema.strict('dom')],
        name: 'body'
    }),
    PartType.required({
        factory: basic,
        schema: [FieldSchema.strict('dom')],
        name: 'footer'
    }),
    PartType.external({
        factory: basic,
        name: 'blocker',
        defaults: Fun.constant({
            dom: {
                tag: 'div',
                styles: {
                    position: 'fixed',
                    left: '0px',
                    top: '0px',
                    right: '0px',
                    bottom: '0px'
                }
            }
        })
    })
]);
var name = Fun.constant('ModalDialog');
export { name, schema, parts };
//# sourceMappingURL=ModalDialogSchema.js.map