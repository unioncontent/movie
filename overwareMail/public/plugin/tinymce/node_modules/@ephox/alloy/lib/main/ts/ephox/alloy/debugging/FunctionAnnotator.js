import { Arr, Option, Strings } from '@ephox/katamari';
var markAsBehaviourApi = function (f, apiName, apiFunction) {
    var delegate = apiFunction.toString();
    var endIndex = delegate.indexOf(')') + 1;
    var openBracketIndex = delegate.indexOf('(');
    var parameters = delegate.substring(openBracketIndex + 1, endIndex - 1).split(/,\s*/);
    f.toFunctionAnnotation = function () {
        return {
            name: apiName,
            parameters: cleanParameters(parameters.slice(0, 1).concat(parameters.slice(3)))
        };
    };
    return f;
};
// Remove any comment (/*) at end of parameter names
var cleanParameters = function (parameters) {
    return Arr.map(parameters, function (p) {
        return Strings.endsWith(p, '/*') ? p.substring(0, p.length - '/*'.length) : p;
    });
};
var markAsExtraApi = function (f, extraName) {
    var delegate = f.toString();
    var endIndex = delegate.indexOf(')') + 1;
    var openBracketIndex = delegate.indexOf('(');
    var parameters = delegate.substring(openBracketIndex + 1, endIndex - 1).split(/,\s*/);
    f.toFunctionAnnotation = function () {
        return {
            name: extraName,
            parameters: cleanParameters(parameters)
        };
    };
    return f;
};
var markAsSketchApi = function (f, apiFunction) {
    var delegate = apiFunction.toString();
    var endIndex = delegate.indexOf(')') + 1;
    var openBracketIndex = delegate.indexOf('(');
    var parameters = delegate.substring(openBracketIndex + 1, endIndex - 1).split(/,\s*/);
    f.toFunctionAnnotation = function () {
        return {
            name: 'OVERRIDE',
            parameters: cleanParameters(parameters.slice(1))
        };
    };
    return f;
};
var getAnnotation = function (f) {
    return f.hasOwnProperty('toFunctionAnnotation') ? Option.some(f.toFunctionAnnotation()) : Option.none();
};
export { markAsBehaviourApi, markAsExtraApi, markAsSketchApi, getAnnotation };
//# sourceMappingURL=FunctionAnnotator.js.map