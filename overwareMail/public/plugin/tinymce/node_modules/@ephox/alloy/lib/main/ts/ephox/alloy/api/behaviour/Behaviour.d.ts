import { DslType } from '@ephox/boulder';
export interface AlloyBehaviour {
    config: (spec: any) => {
        [key: string]: (any) => any;
    };
    exhibit: (info: any, base: any) => {};
    handlers: (info: any) => {};
    name: () => string;
    revoke: () => {
        key: string;
        value: undefined;
    };
    schema: () => DslType.FieldProcessorAdt;
    getValue: (any) => any;
    setValue: (...any) => any;
    fields?: DslType.FieldProcessorAdt[];
}
export interface AlloyBehaviourSchema {
    config: {
        [key: string]: () => any;
    };
    configAsRaw: () => Record<string, any>;
    initialConfig: {};
    me: AlloyBehaviour;
    state: any;
}
export interface AlloyBehaviourConfig {
    fields: DslType.FieldProcessorAdt[];
    name: string;
    active?: {};
    apis?: {};
    extra?: {};
    state?: {};
}
declare const derive: (capabilities: any) => {};
declare const create: (data: AlloyBehaviourConfig) => AlloyBehaviour;
declare const createModes: (data: any) => any;
declare const revoke: () => undefined;
declare const noActive: () => {};
declare const noApis: () => {};
declare const noExtra: () => {};
declare const noState: () => {};
export { derive, revoke, noActive, noApis, noExtra, noState, create, createModes };
