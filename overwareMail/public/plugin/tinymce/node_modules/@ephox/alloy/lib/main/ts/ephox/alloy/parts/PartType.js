import { FieldPresence, FieldSchema, ValueSchema } from '@ephox/boulder';
import { Adt, Fun, Id, Option } from '@ephox/katamari';
var adt = Adt.generate([
    { required: ['data'] },
    { external: ['data'] },
    { optional: ['data'] },
    { group: ['data'] }
]);
var fFactory = FieldSchema.defaulted('factory', { sketch: Fun.identity });
var fSchema = FieldSchema.defaulted('schema', []);
var fName = FieldSchema.strict('name');
var fPname = FieldSchema.field('pname', 'pname', FieldPresence.defaultedThunk(function (typeSpec) {
    return '<alloy.' + Id.generate(typeSpec.name) + '>';
}), ValueSchema.anyValue());
var fDefaults = FieldSchema.defaulted('defaults', Fun.constant({}));
var fOverrides = FieldSchema.defaulted('overrides', Fun.constant({}));
var requiredSpec = ValueSchema.objOf([
    fFactory, fSchema, fName, fPname, fDefaults, fOverrides
]);
var externalSpec = ValueSchema.objOf([
    fFactory, fSchema, fName, fDefaults, fOverrides
]);
var optionalSpec = ValueSchema.objOf([
    fFactory, fSchema, fName, fPname, fDefaults, fOverrides
]);
var groupSpec = ValueSchema.objOf([
    fFactory, fSchema, fName,
    FieldSchema.strict('unit'),
    fPname, fDefaults, fOverrides
]);
var asNamedPart = function (part) {
    return part.fold(Option.some, Option.none, Option.some, Option.some);
};
var name = function (part) {
    var get = function (data) {
        return data.name();
    };
    return part.fold(get, get, get, get);
};
var asCommon = function (part) {
    return part.fold(Fun.identity, Fun.identity, Fun.identity, Fun.identity);
};
var convert = function (adtConstructor, partSpec) {
    return function (spec) {
        var data = ValueSchema.asStructOrDie('Converting part type', partSpec, spec);
        return adtConstructor(data);
    };
};
var required = convert(adt.required, requiredSpec);
var external = convert(adt.external, externalSpec);
var optional = convert(adt.optional, optionalSpec);
var group = convert(adt.group, groupSpec);
var original = Fun.constant('entirety');
export { required, external, optional, group, asNamedPart, name, asCommon, original };
//# sourceMappingURL=PartType.js.map