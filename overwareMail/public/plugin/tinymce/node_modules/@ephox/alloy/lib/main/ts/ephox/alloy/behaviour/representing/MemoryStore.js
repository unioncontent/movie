import { FieldSchema } from '@ephox/boulder';
import * as Fields from '../../data/Fields';
import * as RepresentState from './RepresentState';
var setValue = function (component, repConfig, repState, data) {
    repState.set(data);
    repConfig.onSetValue()(component, data);
};
var getValue = function (component, repConfig, repState) {
    return repState.get();
};
var onLoad = function (component, repConfig, repState) {
    repConfig.store().initialValue().each(function (initVal) {
        if (repState.isNotSet()) {
            repState.set(initVal);
        }
    });
};
var onUnload = function (component, repConfig, repState) {
    repState.clear();
};
export default [
    FieldSchema.option('initialValue'),
    Fields.output('manager', {
        setValue: setValue,
        getValue: getValue,
        onLoad: onLoad,
        onUnload: onUnload,
        state: RepresentState.memory
    })
];
//# sourceMappingURL=MemoryStore.js.map