import { DslType } from '@ephox/boulder';
import { Option, Result } from '@ephox/katamari';
import * as PartType from './PartType';
import { SketchSpec, RawDomSchema } from '../api/ui/Sketcher';
import { SpecSchemaStruct } from '../spec/SpecSchema';
import { AlloyComponent } from '../api/component/ComponentApi';
export interface GeneratedParts {
    [key: string]: (config: RawDomSchema) => SketchSpec;
}
export interface GeneratedSinglePart {
    config: RawDomSchema;
    name: string;
    owner: string;
    uiType: string;
    validated: {};
}
export interface DetailedSpec extends SpecSchemaStruct {
    partUids?: () => {
        [key: string]: string;
    };
}
declare const generate: (owner: string, parts: DslType.FieldProcessorAdt[]) => GeneratedParts;
declare const generateOne: (owner: string, pname: string, config: SketchSpec) => GeneratedSinglePart;
declare const schemas: (parts: PartType.PartTypeAdt[]) => DslType.FieldProcessorAdt[];
declare const names: (parts: any) => string[];
declare const substitutes: (owner: string, detail: DetailedSpec, parts: DslType.FieldProcessorAdt[]) => {
    internals: () => {};
    externals: () => {};
};
declare const components: (owner: string, detail: DetailedSpec, internals: {
    [key: string]: DslType.FieldProcessorAdt;
}) => SketchSpec[];
declare const getPart: (component: AlloyComponent, detail: DetailedSpec, partKey: string) => Option<AlloyComponent>;
declare const getPartOrDie: (component: AlloyComponent, detail: DetailedSpec, partKey: string) => AlloyComponent;
declare const getParts: (component: AlloyComponent, detail: DetailedSpec, partKeys: string[]) => {
    [key: string]: () => Result<AlloyComponent, string>;
};
declare const getAllParts: (component: AlloyComponent, detail: DetailedSpec) => any;
declare const getPartsOrDie: (component: AlloyComponent, detail: DetailedSpec, partKeys: string[]) => {
    [key: string]: () => AlloyComponent;
};
declare const defaultUids: (baseUid: string, partTypes: any) => {};
declare const defaultUidsSchema: (partTypes: any) => DslType.FieldProcessorAdt;
export { generate, generateOne, schemas, names, substitutes, components, defaultUids, defaultUidsSchema, getAllParts, getPart, getPartOrDie, getParts, getPartsOrDie };
