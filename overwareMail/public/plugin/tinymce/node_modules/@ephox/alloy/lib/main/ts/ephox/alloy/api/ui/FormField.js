import { Id, Merger } from '@ephox/katamari';
import { Attr } from '@ephox/sugar';
import * as AlloyParts from '../../parts/AlloyParts';
import * as FormFieldSchema from '../../ui/schema/FormFieldSchema';
import * as Behaviour from '../behaviour/Behaviour';
import { Composing } from '../behaviour/Composing';
import { Representing } from '../behaviour/Representing';
import * as SketchBehaviours from '../component/SketchBehaviours';
import * as AlloyEvents from '../events/AlloyEvents';
import * as Sketcher from './Sketcher';
var factory = function (detail, components, spec, externals) {
    var behaviours = Merger.deepMerge(Behaviour.derive([
        Composing.config({
            find: function (container) {
                return AlloyParts.getPart(container, detail, 'field');
            }
        }),
        Representing.config({
            store: {
                mode: 'manual',
                getValue: function (field) {
                    return Composing.getCurrent(field).bind(Representing.getValue);
                },
                setValue: function (field, value) {
                    Composing.getCurrent(field).each(function (current) {
                        Representing.setValue(current, value);
                    });
                }
            }
        })
    ]), SketchBehaviours.get(detail.fieldBehaviours()));
    var events = AlloyEvents.derive([
        // Used to be systemInit
        AlloyEvents.runOnAttached(function (component, simulatedEvent) {
            var ps = AlloyParts.getParts(component, detail, ['label', 'field']);
            ps.label().each(function (label) {
                ps.field().each(function (field) {
                    var id = Id.generate(detail.prefix());
                    // TODO: Find a nicer way of doing this.
                    Attr.set(label.element(), 'for', id);
                    Attr.set(field.element(), 'id', id);
                });
            });
        })
    ]);
    return {
        uid: detail.uid(),
        dom: detail.dom(),
        components: components,
        behaviours: behaviours,
        events: events
    };
};
var FormField = Sketcher.composite({
    name: 'FormField',
    configFields: FormFieldSchema.schema(),
    partFields: FormFieldSchema.parts(),
    factory: factory
});
export { FormField };
//# sourceMappingURL=FormField.js.map