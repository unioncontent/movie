import { DslType } from '@ephox/boulder';
import { Option } from '@ephox/katamari';
import { DetailedSpec } from '../parts/AlloyParts';
import { RawDomSchema } from '../api/ui/Sketcher';
import { AdtInterface } from '../alien/TypeDefinitions';
export declare type PartType = (spec: {
    [key: string]: any;
}) => DslType.FieldProcessorAdt;
export interface BuildSpec {
    defaults: () => () => {};
    factory: () => any;
    name: () => string;
    overrides: () => OverrideHandler;
    pname: () => string;
    schema: () => DslType.FieldProcessorAdt[];
}
export declare type OverrideHandler = (detail: DetailedSpec, spec?: RawDomSchema, partValidated?: any) => OverrideSpec;
export interface OverrideSpec {
    [key: string]: any;
}
export declare type required<T> = Option<T>;
export declare type external<T> = Option<T>;
export declare type optional<T> = Option<T>;
export declare type group<T> = Option<T>;
export interface PartTypeAdt extends AdtInterface {
    fold<T>(required: any, external: any, optional: any, group: any): any;
}
declare const asNamedPart: (part: PartTypeAdt) => Option<BuildSpec>;
declare const name: (part: PartTypeAdt) => string;
declare const asCommon: (part: PartTypeAdt) => BuildSpec;
declare const required: PartType;
declare const external: PartType;
declare const optional: PartType;
declare const group: PartType;
declare const original: (...x: any[]) => string;
export { required, external, optional, group, asNamedPart, name, asCommon, original };
