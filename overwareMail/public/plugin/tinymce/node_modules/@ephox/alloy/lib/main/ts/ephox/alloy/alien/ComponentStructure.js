import { Fun } from '@ephox/katamari';
import { Compare, PredicateExists } from '@ephox/sugar';
import * as AriaOwner from '../aria/AriaOwner';
var isAriaPartOf = function (component, queryElem) {
    return AriaOwner.find(queryElem).exists(function (owner) {
        return isPartOf(component, owner);
    });
};
var isPartOf = function (component, queryElem) {
    return PredicateExists.closest(queryElem, function (el) {
        return Compare.eq(el, component.element());
    }, Fun.constant(false)) || isAriaPartOf(component, queryElem);
};
var isPartOfAnchor = function (anchor, queryElem) {
    return anchor.anchor === 'hotspot' && isPartOf(anchor.hotspot, queryElem);
};
export { isPartOf, isPartOfAnchor };
//# sourceMappingURL=ComponentStructure.js.map