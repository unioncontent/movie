import * as Behaviour from './Behaviour';
import { AlloyComponent } from '../../api/component/ComponentApi';
import { Result } from '@ephox/katamari';
export interface RepresentingBehaviour extends Behaviour.AlloyBehaviour {
    config: (config: RepresentingConfig) => {
        [key: string]: (any) => any;
    };
    setValueFrom: (component: AlloyComponent, source: AlloyComponent) => void;
}
export interface RepresentingConfig {
    store: {
        mode: string;
        initialValue?: any;
        getFallbackEntry?: (key: string) => {
            value: string;
            text: string;
        };
        getDataKey?: (typeAhead: AlloyComponent) => string;
        setData?: (typeAhead: AlloyComponent, data: {
            text;
            value: string;
        }) => void;
        getValue?: (...any) => any;
        setValue?: (...any) => void;
    };
    onSetValue?: <T, E>() => Result<T, E>;
}
declare const Representing: RepresentingBehaviour;
export { Representing };
