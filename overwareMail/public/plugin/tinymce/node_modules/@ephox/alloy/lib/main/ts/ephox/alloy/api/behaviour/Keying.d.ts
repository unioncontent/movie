import * as Behaviour from './Behaviour';
import { SugarElement } from '../../alien/TypeDefinitions';
import { AlloyComponent } from '../../api/component/ComponentApi';
import { Option } from '@ephox/katamari';
import { SimulatedEvent } from '../../events/SimulatedEvent';
export interface KeyingBehaviour extends Behaviour.AlloyBehaviour {
    config: (config: KeyingConfig) => {
        [key: string]: (any) => any;
    };
    focusIn: (component: AlloyComponent) => void;
    setGridSize: (component: AlloyComponent, numRows: number, numColumns: number) => void;
}
export interface KeyingInfo {
    focusIn: () => any;
    focusManager: () => any;
    handler: () => any;
    onDown: () => any;
    onEnter: () => any;
    onEscape: () => any;
    onLeft: () => any;
    onRight: () => any;
    onShiftEnter: () => any;
    onShiftTab: () => any;
    onSpace: () => any;
    onTab: () => any;
    onUp: () => any;
    state: () => any;
}
export interface KeyingFocusManager {
    set: (component: AlloyComponent, focusee: any) => void;
    get: (component: AlloyComponent) => AlloyComponent;
}
export declare type KeyingModes = 'acyclic' | 'cyclic' | 'flow' | 'flatgrid' | 'matrix' | 'execution' | 'menu' | 'special';
export interface KeyingConfig {
    mode: KeyingModes;
    selector?: string;
    visibilitySelector?: string;
    initSize?: {
        numColumns: number;
        numRows: number;
    };
    getInitial?: (chooser) => Option<SugarElement>;
    execute?: (chooser, simulatedEvent, focused) => boolean;
    executeOnMove?: boolean;
    cycles?: boolean;
    useSpace?: boolean;
    useEnter?: boolean;
    useControlEnter?: boolean;
    captureTab?: boolean;
    focusIn?: (comp: AlloyComponent, keyInfo: KeyingInfo) => void;
    focusManager?: KeyingFocusManager;
    selectors?: {
        row: string;
        cell: string;
    };
    moveOnTab?: boolean;
    onSpace?: (comp: AlloyComponent) => Option<boolean>;
    onDown?: (comp: AlloyComponent, simulatedEvent: SimulatedEvent) => Option<boolean>;
    onUp?: (comp: AlloyComponent, simulatedEvent: SimulatedEvent) => Option<boolean>;
    onLeft?: (comp: AlloyComponent, simulatedEvent: SimulatedEvent) => Option<boolean>;
    onRight?: (comp: AlloyComponent, simulatedEvent: SimulatedEvent) => Option<boolean>;
    onEnter?: (comp: AlloyComponent, simulatedEvent: SimulatedEvent) => Option<boolean>;
    onEscape?: (comp: AlloyComponent, simulatedEvent: SimulatedEvent) => Option<boolean>;
    onShiftEnter?: (comp: AlloyComponent, simulatedEvent: SimulatedEvent) => Option<boolean>;
    onShiftTab?: (comp: AlloyComponent, simulatedEvent: SimulatedEvent) => Option<boolean>;
    onTab?: (comp: AlloyComponent, simulatedEvent: SimulatedEvent) => Option<boolean>;
    useTabstopAt?: (comp: AlloyComponent) => Option<boolean>;
}
declare const Keying: KeyingBehaviour;
export { Keying };
