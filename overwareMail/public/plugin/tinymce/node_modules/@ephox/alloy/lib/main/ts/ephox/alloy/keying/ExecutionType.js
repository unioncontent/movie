import { FieldSchema } from '@ephox/boulder';
import { Fun, Option } from '@ephox/katamari';
import * as EditableFields from '../alien/EditableFields';
import Keys from '../alien/Keys';
import * as NoState from '../behaviour/common/NoState';
import * as KeyMatch from '../navigation/KeyMatch';
import * as KeyRules from '../navigation/KeyRules';
import * as KeyingType from './KeyingType';
import * as KeyingTypes from './KeyingTypes';
var schema = [
    FieldSchema.defaulted('execute', KeyingTypes.defaultExecute),
    FieldSchema.defaulted('useSpace', false),
    FieldSchema.defaulted('useEnter', true),
    FieldSchema.defaulted('useControlEnter', false),
    FieldSchema.defaulted('useDown', false)
];
var execute = function (component, simulatedEvent, executeConfig, executeState) {
    return executeConfig.execute()(component, simulatedEvent, component.element());
};
var getRules = function (component, simulatedEvent, executeConfig, executeState) {
    var spaceExec = executeConfig.useSpace() && !EditableFields.inside(component.element()) ? Keys.SPACE() : [];
    var enterExec = executeConfig.useEnter() ? Keys.ENTER() : [];
    var downExec = executeConfig.useDown() ? Keys.DOWN() : [];
    var execKeys = spaceExec.concat(enterExec).concat(downExec);
    return [
        KeyRules.rule(KeyMatch.inSet(execKeys), execute)
    ].concat(executeConfig.useControlEnter() ? [
        KeyRules.rule(KeyMatch.and([KeyMatch.isControl, KeyMatch.inSet(Keys.ENTER())]), execute)
    ] : []);
};
var getEvents = Fun.constant({});
var getApis = Fun.constant({});
export default KeyingType.typical(schema, NoState.init, getRules, getEvents, getApis, Option.none());
//# sourceMappingURL=ExecutionType.js.map