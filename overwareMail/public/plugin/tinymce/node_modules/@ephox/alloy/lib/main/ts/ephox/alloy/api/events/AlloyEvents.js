import { Objects } from '@ephox/boulder';
import * as EventRoot from '../../alien/EventRoot';
import * as EventHandler from '../../construct/EventHandler';
import * as AlloyTriggers from './AlloyTriggers';
import * as SystemEvents from './SystemEvents';
var derive = Objects.wrapAll;
var abort = function (name, predicate) {
    return {
        key: name,
        value: EventHandler.nu({
            abort: predicate
        })
    };
};
var can = function (name, predicate) {
    return {
        key: name,
        value: EventHandler.nu({
            can: predicate
        })
    };
};
var preventDefault = function (name) {
    return {
        key: name,
        value: EventHandler.nu({
            run: function (component, simulatedEvent) {
                simulatedEvent.event().prevent();
            }
        })
    };
};
var run = function (name, handler) {
    return {
        key: name,
        value: EventHandler.nu({
            run: handler
        })
    };
};
var runActionExtra = function (name, action, extra) {
    return {
        key: name,
        value: EventHandler.nu({
            run: function (component) {
                action.apply(undefined, [component].concat(extra));
            }
        })
    };
};
var runOnName = function (name) {
    return function (handler) {
        return run(name, handler);
    };
};
var runOnSourceName = function (name) {
    return function (handler) {
        return {
            key: name,
            value: EventHandler.nu({
                run: function (component, simulatedEvent) {
                    if (EventRoot.isSource(component, simulatedEvent)) {
                        handler(component, simulatedEvent);
                    }
                }
            })
        };
    };
};
var redirectToUid = function (name, uid) {
    return run(name, function (component, simulatedEvent) {
        component.getSystem().getByUid(uid).each(function (redirectee) {
            AlloyTriggers.dispatchEvent(redirectee, redirectee.element(), name, simulatedEvent);
        });
    });
};
var redirectToPart = function (name, detail, partName) {
    var uid = detail.partUids()[partName];
    return redirectToUid(name, uid);
};
var runWithTarget = function (name, f) {
    return run(name, function (component, simulatedEvent) {
        component.getSystem().getByDom(simulatedEvent.event().target()).each(function (target) {
            f(component, target, simulatedEvent);
        });
    });
};
var cutter = function (name) {
    return run(name, function (component, simulatedEvent) {
        simulatedEvent.cut();
    });
};
var stopper = function (name) {
    return run(name, function (component, simulatedEvent) {
        simulatedEvent.stop();
    });
};
var runOnAttached = runOnSourceName(SystemEvents.attachedToDom());
var runOnDetached = runOnSourceName(SystemEvents.detachedFromDom());
var runOnInit = runOnSourceName(SystemEvents.systemInit());
var runOnExecute = runOnName(SystemEvents.execute());
export { derive, run, preventDefault, runActionExtra, runOnAttached, runOnDetached, runOnInit, runOnExecute, redirectToUid, redirectToPart, runWithTarget, abort, can, cutter, stopper };
//# sourceMappingURL=AlloyEvents.js.map