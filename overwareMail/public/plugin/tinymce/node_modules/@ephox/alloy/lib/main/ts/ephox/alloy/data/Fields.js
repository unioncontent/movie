import { FieldPresence, FieldSchema, ValueSchema } from '@ephox/boulder';
import { Arr, Fun, Option, Result } from '@ephox/katamari';
import * as Debugging from '../debugging/Debugging';
import * as MenuMarkers from '../menu/util/MenuMarkers';
var _initSize = FieldSchema.strictObjOf('initSize', [
    FieldSchema.strict('numColumns'),
    FieldSchema.strict('numRows')
]);
var itemMarkers = function () {
    return FieldSchema.strictOf('markers', MenuMarkers.itemSchema());
};
var menuMarkers = function () {
    return FieldSchema.strictOf('markers', MenuMarkers.schema());
};
var tieredMenuMarkers = function () {
    return FieldSchema.strictObjOf('markers', [
        FieldSchema.strict('backgroundMenu')
    ].concat(MenuMarkers.menuFields()).concat(MenuMarkers.itemFields()));
};
var markers = function (required) {
    return FieldSchema.strictObjOf('markers', Arr.map(required, FieldSchema.strict));
};
var onPresenceHandler = function (label, fieldName, presence) {
    // We care about where the handler was declared (in terms of which schema)
    var trace = Debugging.getTrace();
    return FieldSchema.field(fieldName, fieldName, presence, 
    // Apply some wrapping to their supplied function
    ValueSchema.valueOf(function (f) {
        return Result.value(function () {
            /*
             * This line is just for debugging information
             */
            Debugging.logHandler(label, fieldName, trace);
            return f.apply(undefined, arguments);
        });
    }));
};
var onHandler = function (fieldName) {
    return onPresenceHandler('onHandler', fieldName, FieldPresence.defaulted(Fun.noop));
};
var onKeyboardHandler = function (fieldName) {
    return onPresenceHandler('onKeyboardHandler', fieldName, FieldPresence.defaulted(Option.none));
};
var onStrictHandler = function (fieldName) {
    return onPresenceHandler('onHandler', fieldName, FieldPresence.strict());
};
var onStrictKeyboardHandler = function (fieldName) {
    return onPresenceHandler('onKeyboardHandler', fieldName, FieldPresence.strict());
};
var output = function (name, value) {
    return FieldSchema.state(name, Fun.constant(value));
};
var snapshot = function (name) {
    return FieldSchema.state(name, Fun.identity);
};
var initSize = Fun.constant(_initSize);
export { initSize, itemMarkers, menuMarkers, tieredMenuMarkers, markers, onHandler, onKeyboardHandler, onStrictHandler, onStrictKeyboardHandler, output, snapshot };
//# sourceMappingURL=Fields.js.map