import { FieldSchema, Objects, ValueSchema } from '@ephox/boulder';
import { Fun } from '@ephox/katamari';
import { Receiving } from '../api/behaviour/Receiving';
import { Sandboxing } from '../api/behaviour/Sandboxing';
import * as Channels from '../api/messages/Channels';
var schema = ValueSchema.objOfOnly([
    FieldSchema.defaulted('isExtraPart', Fun.constant(false))
]);
var receivingConfig = function (rawSpec) {
    var c = receiving(rawSpec);
    return Receiving.config(c);
};
var receiving = function (rawSpec) {
    var spec = ValueSchema.asRawOrDie('Dismissal', schema, rawSpec);
    return {
        channels: Objects.wrap(Channels.dismissPopups(), {
            schema: ValueSchema.objOfOnly([
                FieldSchema.strict('target')
            ]),
            onReceive: function (sandbox, data) {
                if (Sandboxing.isOpen(sandbox)) {
                    var isPart = Sandboxing.isPartOf(sandbox, data.target()) || spec.isExtraPart(sandbox, data.target());
                    if (!isPart) {
                        Sandboxing.close(sandbox);
                    }
                }
            }
        })
    };
};
export { receiving, receivingConfig };
//# sourceMappingURL=Dismissal.js.map