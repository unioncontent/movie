import * as Behaviour from './Behaviour';
import { SugarElement } from '../../alien/TypeDefinitions';
import { Option } from '@ephox/katamari';
import { AlloyComponent } from '../../api/component/ComponentApi';
import { SketchSpec } from '../../api/ui/Sketcher';
export interface SandboxingBehaviour extends Behaviour.AlloyBehaviour {
    config: (config: SandboxingConfig) => {
        [key: string]: (any) => any;
    };
    cloak: (sandbox: AlloyComponent) => void;
    decloak: (sandbox: AlloyComponent) => void;
    open: (sandbox: AlloyComponent, thing: SketchSpec) => AlloyComponent;
    close: (sandbox: AlloyComponent) => void;
    isOpen: (sandbox: AlloyComponent) => boolean;
    isPartOf: (sandbox: AlloyComponent, candidate: () => SugarElement) => boolean;
    getState: (sandbox: AlloyComponent) => Option<AlloyComponent>;
    closeSandbox: (sandbox: AlloyComponent) => void;
}
export interface SandboxingConfig {
    getAttachPoint: () => AlloyComponent;
    isPartOf: (container: AlloyComponent, data: AlloyComponent, queryElem: SugarElement) => boolean;
    onOpen?: (component: AlloyComponent, menu: AlloyComponent) => void;
    onClose?: (component: AlloyComponent, menu: AlloyComponent) => void;
    cloakVisibilityAttr?: string;
}
declare const Sandboxing: SandboxingBehaviour;
export { Sandboxing };
